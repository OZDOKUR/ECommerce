@model ECommerce.Models.ViewModels.CartViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- preload -->
<div class="preload preload-container">
    <div class="preload-logo">
        <div class="spinner"></div>
    </div>
</div>
<!-- /preload -->
<div id="wrapper">

    <!-- page-title -->
    <div class="tf-page-title">
        <div class="container-full">
            <div class="heading text-center">Sepetim</div>
        </div>
    </div>
    <!-- /page-title -->
    <!-- page-cart -->
    <section class="flat-spacing-11">
        <div class="container">
            <div class="tf-page-cart-wrap">
                <div class="tf-page-cart-item">
                    <form method="post" asp-controller="Cart" asp-action="UpdateCart" class="d-inline">
                        @Html.AntiForgeryToken()
                        <table class="tf-table-page-cart">
                            <thead>
                                <tr>
                                    <th>Ürün</th>
                                    <th>Fiyat</th>
                                    <th>Adet</th>
                                    <th>Toplam</th>
                                    <th>İşlem</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.CartItems != null && Model.CartItems.Any())
                                {
                                    foreach (var item in Model.CartItems)
                                    {
                                        var productDetail = Model.ProductDetails.FirstOrDefault(pd => pd.Product.Id == item.ProductId);
                                        var variant = productDetail?.Variants.FirstOrDefault(v => v.Id == item.VariantId);
                                        var imageUrl = productDetail?.Images.FirstOrDefault()?.ImageUrl;
                                        var productName = productDetail?.Product.ProductName;
                                        var color = variant?.Color;
                                        var size = variant?.Size;
                                        var quantity = item.Quantity;
                                        var price = productDetail?.Product.Price + (variant?.AdditionalPrice ?? 0);
                                        var total = price * quantity;
                                        var productId = productDetail?.Product.Id;

                                        <tr class="tf-cart-item" data-cart-item-id="@item.Id">
                                            <td class="tf-cart-item_product">
                                                <a href="product-detail.html" class="img-box">
                                                    <img src="@imageUrl" alt="img-product">
                                                </a>
                                                <div class="cart-info">
                                                    <a href="product-detail.html" class="cart-title link">@productName</a>
                                                    <div class="cart-meta-variant">@color / @size</div>
                                                </div>
                                            </td>
                                            <td class="tf-cart-item_price" cart-data-title="Price">
                                                <div class="cart-price">@price.Value.ToString("C")</div>
                                            </td>
                                            <td class="tf-cart-item_quantity">
                                                <div class="wg-quantity">
                                                    <button type="button" style=" background-color: transparent; border: none;" class="btn-quantity minus-btn" data-action="decrease">-</button>
                                                    <span class="quantity-display" style="display: flex; align-items: center; justify-content: center; width: 40px; height: 30px; text-align: center;">@quantity</span>
                                                    <button type="button" style=" background-color: transparent; border: none;" class="btn-quantity plus-btn" data-action="increase">+</button>
                                                </div>
                                            </td>
                                            <td class="tf-cart-item_total" cart-data-title="Total">
                                                <div class="cart-total">@total.Value.ToString("C")</div>
                                            </td>
                                            <td class="tf-cart-item_action">
                                                <a href="/Cart/DeleteCartItem/@productId" style=" border: none;" class="btn btn-outline-danger">Kaldır</a>
                                           
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <div class="tf-page-cart text-center mt_140 mb_200">
                                        <h5 class="mb_24">Sepetiniz Boş</h5>
                                        <p class="mb_24">Mevcut tüm ürünleri kontrol edebilir ve bazılarını mağazadan satın alabilirsiniz.</p>
                                        <a href="~/Home/Index" class="tf-btn btn-sm radius-3 btn-fill btn-icon animate-hover-btn">Mağazaya Dön<i class="icon icon-arrow1-top-left"></i></a>
                                    </div>
                                }
                            </tbody>
                        </table>
                        <div class="tf-page-cart-note">
                            <label for="cart-note">Sipariş Notu Ekleyin</label>
                            <textarea name="note" id="cart-note" placeholder="Size nasıl yardımcı olabiliriz?"></textarea>
                        </div>
                    </form>
                </div>

                <div class="tf-page-cart-footer">
                    <div class="tf-cart-footer-inner">
                        <div class="tf-page-cart-checkout">
                            <div class="tf-cart-totals-discounts">
                                <h3>Ara Toplam</h3>
                                <span class="total-value">@Model.CartItems.Sum(item => item.Quantity * (Model.ProductDetails.First(pd => pd.Product.Id == item.ProductId).Product.Price + Model.ProductDetails.First(pd => pd.Product.Id == item.ProductId).Variants.First(v => v.Id == item.VariantId).AdditionalPrice)).ToString("C")</span>
                            </div>
                            <p class="tf-cart-tax">
                                Vergiler ve <a href="shipping-delivery.html">kargo</a> ödeme sırasında hesaplanacak
                            </p>
                            <div class="cart-checkbox">
                                <input type="checkbox" class="tf-check" id="check-agree">
                                <label for="check-agree" class="fw-4">
                                    <a href="terms-conditions.html">şartlar ve koşullar</a> ile aynı fikirdeyim
                                </label>
                            </div>
                            <div class="cart-checkout-btn">
                                <form action="~/Checkout/Index" method="get">
                                    <button type="submit" class="tf-btn w-100 btn-fill animate-hover-btn radius-3 justify-content-center">
                                        <span>Ödeme Yap</span>
                                    </button>
                                </form>
                            </div>
                            <div class="tf-page-cart_imgtrust">
                                <p class="text-center fw-6">Güvenli Ödeme Garantisi</p>
                                <div class="cart-list-social">
                                    <div class="payment-item">
                                        <!-- SVG Icons for payment methods -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </section>
    <!-- page-cart -->

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const quantityButtons = document.querySelectorAll('.btn-quantity');
        const removeButtons = document.querySelectorAll('.remove-cart');

        // Function to update the total price for a cart item
        function updateTotalPrice(cartItemRow) {
            const quantityDisplay = cartItemRow.querySelector('.quantity-display');
            const quantity = parseInt(quantityDisplay.textContent);
            const priceText = cartItemRow.querySelector('.tf-cart-item_price .cart-price').textContent;
            const price = parseFloat(priceText.replace(/[^\d,]/g, '').replace(',', '.'));

            const totalPrice = price * quantity;
            cartItemRow.querySelector('.tf-cart-item_total .cart-total').textContent = totalPrice.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });

            updateSubtotal();
        }

        // Function to update the subtotal
        function updateSubtotal() {
            let subtotal = 0;
            document.querySelectorAll('.tf-cart-item').forEach(cartItemRow => {
                const totalText = cartItemRow.querySelector('.tf-cart-item_total .cart-total').textContent;
                const total = parseFloat(totalText.replace(/[^\d,]/g, '').replace(',', '.'));
                subtotal += total;
            });

            document.querySelector('.tf-cart-totals-discounts .total-value').textContent = subtotal.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
        }

        // Handle quantity button clicks
        quantityButtons.forEach(button => {
            button.addEventListener('click', function () {
                const action = this.dataset.action;
                const cartItemRow = this.closest('.tf-cart-item');
                const cartItemId = cartItemRow.dataset.cartItemId;
                const quantityDisplay = cartItemRow.querySelector('.quantity-display');
                let quantity = parseInt(quantityDisplay.textContent);

                if (action === 'increase') {
                    quantity += 1;
                } else if (action === 'decrease') {
                    quantity = Math.max(quantity - 1, 1); // Ensure quantity does not go below 1
                }

                quantityDisplay.textContent = quantity;

                // Send AJAX request to update the cart
                fetch(`/Cart/UpdateCartItem?cartItemId=${cartItemId}&newQuantity=${quantity}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateTotalPrice(cartItemRow); // Update the total price for the item
                            Swal.fire({
                                title: 'Sepetiniz başarıyla güncellendi',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                title: 'Hata',
                                text: 'Bir hata oluştu, lütfen tekrar deneyin.',
                                icon: 'error'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Hata',
                            text: 'Bir hata oluştu, lütfen tekrar deneyin.',
                            icon: 'error'
                        });
                    });
            });
        });

        // Handle remove button clicks
        removeButtons.forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.dataset.productId;

                fetch(`/Cart/DeleteCartItem`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: productId }) // 'id' olarak JSON formatında gönder
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.closest('.tf-cart-item').remove(); // Remove the item row from the table
                            updateSubtotal(); // Update the subtotal
                            Swal.fire({
                                title: 'Ürün başarıyla kaldırıldı',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                title: 'Hata',
                                text: 'Bir hata oluştu, lütfen tekrar deneyin.',
                                icon: 'error'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Hata',
                            text: 'Bir hata oluştu, lütfen tekrar deneyin.',
                            icon: 'error'
                        });
                    });
            });
        });

        // Initial total price calculation for all items
        document.querySelectorAll('.tf-cart-item').forEach(cartItemRow => {
            updateTotalPrice(cartItemRow);
        });
    });
</script>

</div>
